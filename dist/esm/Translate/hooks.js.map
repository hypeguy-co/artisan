{"version":3,"sources":["../../../src/Translate/hooks.js"],"names":["useTranslateContext","ctx","ContextTranslate","process","env","NODE_ENV","Error","useTranslate","state","updateLanguage","language","useTranslateString","label","data","module","addSupportedModule","mod","defaultModule","lang","resources","keys","text"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAOO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AACvC,MAAMC,GAAG,GAAG,uBAAWC,4BAAX,CAAZ;;AAEA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACJ,GAA9C,EAAmD;AACjD,UAAM,IAAIK,KAAJ,CACJ,sFADI,CAAN;AAGD;;AAED,SAAOL,GAAP;AACD,CAVM;;;;AAYA,IAAMM,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,6BACEP,mBAAmB,EADrB;AAAA,MACxBQ,KADwB,wBACxBA,KADwB;AAAA,MACjBC,cADiB,wBACjBA,cADiB;;AAEhC,SAAO,CAACD,KAAK,CAACE,QAAP,EAAiBD,cAAjB,CAAP;AACD,CAHM;;;;AAKA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQC,IAAR,EAAcH,QAAd,EAAwBI,MAAxB,EAAmC;AAAA,8BAC7Bd,mBAAmB,EADU;AAAA,MAC3DQ,KAD2D,yBAC3DA,KAD2D;AAAA,MACpDO,kBADoD,yBACpDA,kBADoD;;AAEnE,MAAMC,GAAG,GAAGF,MAAM,IAAIN,KAAK,CAACS,aAAhB,IAAiC,SAA7C;AACA,MAAMC,IAAI,GAAGR,QAAQ,IAAIF,KAAK,CAACE,QAA/B;AAHmE,MAI3DS,SAJ2D,GAI7CX,KAJ6C,CAI3DW,SAJ2D;AAKnE,MAAIC,IAAI,GAAG,IAAX;AAEA,wBAAU,YAAM;AACd,QAAI,CAACD,SAAS,CAACD,IAAD,CAAV,IAAoB,CAACC,SAAS,CAACD,IAAD,CAAT,CAAgBF,GAAhB,CAAzB,EAA+C;AAC7CD,MAAAA,kBAAkB,CAACG,IAAD,EAAOF,GAAP,CAAlB;AACD;AACF,GAJD,EAIG,CAACD,kBAAD,EAAqBG,IAArB,EAA2BF,GAA3B,EAAgCG,SAAhC,CAJH;;AAMA,MAAIA,SAAS,CAACD,IAAD,CAAT,IAAmBC,SAAS,CAACD,IAAD,CAAT,CAAgBF,GAAhB,CAAvB,EAA6C;AAC3CI,IAAAA,IAAI,GAAGD,SAAS,CAACD,IAAD,CAAT,CAAgBF,GAAhB,CAAP;AACD;;AAED,MAAI,CAACJ,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,MAAIS,IAAI,GAAG,+BAAmBT,KAAnB,EAA0BQ,IAA1B,CAAX;;AAEA,MAAI,CAACC,IAAL,EAAW;AACT,WAAOT,KAAP;AACD;;AAED,MAAIC,IAAJ,EAAU;AACRQ,IAAAA,IAAI,GAAG,wBAAYA,IAAZ,EAAkBR,IAAlB,CAAP;AACD;;AAED,MAAI,gCAAoBQ,IAApB,CAAJ,EAA+B;AAC7BA,IAAAA,IAAI,GAAG,iCAAqBA,IAArB,CAAP;AACD;;AAED,SAAOA,IAAP;AACD,CApCM","sourcesContent":["import { useEffect, useContext } from 'react'\nimport ContextTranslate from './ContextTranslate'\nimport {\n  ResolveKeyMemoized,\n  renderFormatedString,\n  checkMarkdownMarkup,\n  replaceData\n} from './utils'\n\nexport const useTranslateContext = () => {\n  const ctx = useContext(ContextTranslate)\n\n  if (process.env.NODE_ENV !== 'production' && !ctx) {\n    throw new Error(\n      'could not find context value; please ensure the component is wrapped in a <Provider>'\n    )\n  }\n\n  return ctx\n}\n\nexport const useTranslate = () => {\n  const { state, updateLanguage } = useTranslateContext()\n  return [state.language, updateLanguage]\n}\n\nexport const useTranslateString = (label, data, language, module) => {\n  const { state, addSupportedModule } = useTranslateContext()\n  const mod = module || state.defaultModule || 'general'\n  const lang = language || state.language\n  const { resources } = state\n  let keys = null\n\n  useEffect(() => {\n    if (!resources[lang] || !resources[lang][mod]) {\n      addSupportedModule(lang, mod)\n    }\n  }, [addSupportedModule, lang, mod, resources])\n\n  if (resources[lang] && resources[lang][mod]) {\n    keys = resources[lang][mod]\n  }\n\n  if (!label) {\n    return null\n  }\n\n  let text = ResolveKeyMemoized(label, keys)\n\n  if (!text) {\n    return label\n  }\n\n  if (data) {\n    text = replaceData(text, data)\n  }\n\n  if (checkMarkdownMarkup(text)) {\n    text = renderFormatedString(text)\n  }\n\n  return text\n}\n"],"file":"hooks.js"}