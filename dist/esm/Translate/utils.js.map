{"version":3,"sources":["../../../src/Translate/utils.js"],"names":["path","require","ResolveKey","label","obj","split","reduce","prev","curr","replaceData","text","data","replace","$1","$2","ResolveKeyMemoized","fetchResources","lang","mod","basePath","directResult","resource","promiseAllNamed","nameToPromise","entries","Object","Promise","all","map","e","then","results","nameToResult","i","length","name","checkMarkdownMarkup","includes","renderFormatedString","markdownLink","italicText","sentence","index","join","r","hrefText","props","href","attributes"],"mappings":"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","sourcesContent":["import memoizeOne from 'memoize-one';\nvar path = require('path');\n\nconst ResolveKey = (label, obj) => {\n  if (!obj) {\n    return label;\n  }\n\n  return label\n      .split('.')\n      .reduce((prev, curr) => prev[curr] || false, obj);\n};\n\nexport const replaceData = (text, data) => (\n  text.replace(/\\$\\(([^)]+)?\\)/g, ($1, $2) => data[$2])\n);\n\nexport const ResolveKeyMemoized = memoizeOne(ResolveKey);\n\nexport const fetchResources = async (lang, mod, basePath, directResult = false) => {\n  const resource = await import(`../../../src/languages/${lang}/${mod}.json`);\n  if (directResult) {\n    return resource.default;\n  }\n\n  return {\n    [lang]: {\n      [mod]: resource.default\n    }\n  };\n};\n\nexport const promiseAllNamed = (nameToPromise) => {\n  const entries = Object.entries(nameToPromise);\n  return Promise.all(entries.map((e) => e[1]))\n      .then((results) => {\n        const nameToResult = {};\n        for (let i = 0; i < results.length; ++i) {\n          const name = entries[i][0];\n          nameToResult[name] = results[i];\n        }\n        return nameToResult;\n      });\n};\n\n\nexport const checkMarkdownMarkup = (text) => (\n  text.includes('*') ||\n  text.includes('__') ||\n  text.includes('~') ||\n  (text.includes('[') && text.includes(']'))\n);\n\nexport const renderFormatedString = (text) => {\n  const markdownLink = /\\[([^\\]]*)\\]\\(([^)]*)\\)/gm;\n  const italicText = /__([^_]+)__/gm;\n\n  return text\n      .split('*')\n      .map((sentence, index) => {\n        if (index % 2 !== 0) return `<strong>${sentence}</strong>`;\n        return sentence;\n      })\n      .join('')\n      .replace(italicText, '<em>$1<em>')\n      .split('~')\n      .map((sentence, index) => {\n        if (index % 2 !== 0) return `<ins>${sentence}</ins>`;\n\n        return sentence;\n      })\n      .join('')\n      .replace(markdownLink, (r, hrefText, props) => {\n        const [href, ...attributes] = props.split(' ');\n        return `<a class=\"translate-link text-small\" ${attributes.join(' ')} href=\"${href}\">${hrefText}</a>`;\n      });\n};\n"],"file":"utils.js"}