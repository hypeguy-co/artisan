{"version":3,"sources":["../../../src/Link/Link.tsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { ComponentProps } from 'react';\n// import { useRouter } from 'next/router';\n// import NextLink from 'next/link'\n// import cn from 'classnames';\n\n// import { setQueryString } from 'utils/url';\n\n// // ----------------------------------------------------------------------\n// // https://gist.github.com/flybayer/f9ca161efd3abcb1d8cb76c92e05f5d2\n// // Smart wrapper around Next.js <Link>\n// //\n// // This is to improve the default handling of Next.js dynamic links which\n// // requires both `href` and `as` props.\n// // This improvement enables the following usage:\n// //\n// // <Link page=\"users/[id]\" params={{ id: user.id }}>{user.name}</Link>\n// //\n// // <Link page=\"blog/[...slug]\" params={{ slug: ['coffee', 'frenchpress'] }}>View Here</Link>\n// // ----------------------------------------------------------------------\n\n// export type LinkProps = {\n//   // TODO require `page` OR `href`\n//   href?: string;\n//   as?: string;\n//   page?: string;\n\n//   children: JSX.Element;\n//   className?: string;\n//   activeClassName?: string;\n//   partiallyActive?: boolean;\n\n//   params?: Record<string, number | number[] | string | string[]>;\n\n//   linkProps?: Omit<ComponentProps<typeof NextLink>, 'href' | 'as'>;\n// } & ComponentProps<'a'>;\n\n// const Link = ({\n//   href,\n//   as,\n//   page,\n//   children,\n//   className,\n//   activeClassName,\n//   partiallyActive = false,\n//   params,\n//   linkProps = {},\n//   ...props\n// }: LinkProps) => {\n//   const { pathname, query } = useRouter();\n\n//   // If user suppiled href & as, then use those. Otherwise fallback to smart `page` logic\n//   let finalHref = href || page;\n//   let finalAs = as || page;\n\n//   if (page && params) {\n//     // We treat the `page` prop as a template for generating the `as` prop\n//     for (const [key, value] of Object.entries(params)) {\n//       if (\n//         finalAs.includes(`[${key}]`) &&\n//         (typeof value === 'string' || typeof value === 'number')\n//       ) {\n//         finalAs = finalAs.replace(`[${key}]`, value.toString());\n//       } else if (finalAs.includes(`[[...${key}]]`)) {\n//         const normalizedValue = Array.isArray(value)\n//           ? value.join('/')\n//           : value.toString();\n//         finalAs = finalAs.replace(`[[...${key}]]`, normalizedValue);\n//       } else if (finalAs.includes(`[...${key}]`)) {\n//         const normalizedValue = Array.isArray(value)\n//           ? value.join('/')\n//           : value.toString();\n//         finalAs = finalAs.replace(`[...${key}]`, normalizedValue);\n//       }\n//     }\n//   }\n\n//   const destPath = finalAs || finalHref;\n//   const isActive = partiallyActive\n//     ? pathname.startsWith(destPath)\n//     : pathname === destPath;\n\n//   if(typeof window !== 'undefined') {\n//     finalHref += window.location.search;\n//     finalAs += window.location.search;\n//   }\n\n//   return (\n//     <NextLink {...linkProps} href={finalHref} as={finalAs} {...props}>\n//       {/* eslint-disable-next-line jsx-a11y/anchor-is-valid -- next auto adds href */}\n//       <a className={cn([className, isActive && activeClassName])}>\n//         {children}\n//       </a>\n//     </NextLink>\n//   );\n// };\n\n// export default Link;\n"],"file":"Link.js"}