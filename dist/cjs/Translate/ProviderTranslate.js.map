{"version":3,"sources":["../../../src/Translate/ProviderTranslate.js"],"names":["ProviderTranslate","language","resources","keysLocation","defaultModule","supportedModules","children","stateLanguage","setStateLanguage","stateResources","setStateResources","localSupportedModules","setlocalSupportedModules","addSupportedModule","lang","mod","includes","asyncResoucers","forEach","module","updateResources","result","JSON","stringify","data","autoExecuteAsync","state","updateLanguage","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport ContextTranslate from './ContextTranslate';\nimport { fetchResourcesSrc, fetchResources, promiseAllNamed } from './utils';\n\nconst ProviderTranslate = ({\n  language,\n  resources,\n  keysLocation,\n  defaultModule,\n  supportedModules,\n  children\n}) => {\n  // Ensures a default modules been set\n  if (!supportedModules) {\n    supportedModules = [defaultModule];\n  }\n\n  const [stateLanguage, setStateLanguage] = useState(language);\n  const [stateResources, setStateResources] = useState(resources);\n  const [localSupportedModules, setlocalSupportedModules] = useState(supportedModules);\n\n  const addSupportedModule = (lang, mod) => {\n    if (!localSupportedModules.includes(mod)) {\n      setlocalSupportedModules([...localSupportedModules, mod]);\n    }\n  };\n\n  useEffect(() => {\n    (async function autoExecuteAsync() {\n      const asyncResoucers = {};\n      localSupportedModules.forEach((module) => {\n        if (!stateResources[stateLanguage] || !stateResources[stateLanguage][module]) {\n          asyncResoucers[module] = updateResources(stateLanguage, module);\n        }\n      });\n\n      const result = await promiseAllNamed(asyncResoucers);\n\n      // Checks if some new resource was loaded\n      if (JSON.stringify(result) === '{}') {\n        return null;\n      }\n\n      const data = {\n        ...stateResources,\n        [stateLanguage]: {\n          ...stateResources[stateLanguage],\n          ...result\n        }\n      };\n\n      return setStateResources(data);\n    }());\n  }, [stateResources, localSupportedModules, stateLanguage]);\n\n  const updateResources = async (lang, mod) => await fetchResources(lang, mod, keysLocation, true);\n\n  const state = {\n    resources: stateResources,\n    language: stateLanguage,\n    keysLocation,\n    supportedModules,\n    defaultModule\n  };\n\n  return (\n    <ContextTranslate.Provider value={{\n      state,\n      updateLanguage: setStateLanguage,\n      updateResources,\n      addSupportedModule\n    }}\n    >\n      {children}\n    </ContextTranslate.Provider>\n  );\n};\n\nProviderTranslate.defaultProps = {\n  resources: {},\n  keysLocation: 'src/languages',\n  defaultModule: 'general'\n};\n\nexport default ProviderTranslate;\n"],"file":"ProviderTranslate.js"}